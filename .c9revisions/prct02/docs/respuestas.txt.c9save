{"ts":1382030747817,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"rogramación Científica\nAlexandra Rivero García\nRespuestas Práctica 2\n\nGit Repository: https://github.com/alelit4/PC\n\n10. ¿Qué hace el siguiente programa? ¿Es correcto? ¿Qué está mal?\n\t\n\tEste programa no se puede ejecutar, ya que en la línea 6 o en el momento de definir la operación a * x + b = 0 hay dos errores. \n\n\tPor un lado la variable x no está definida o inicializada por lo que no podemos operar con ella. Por otro lado no se puede hacer una asignación de un valor(en este caso 0) a una serie de operaciones.\n\n\n11. ¿Qué hace el siguiente programa? ¿Es correcto? ¿Qué está mal?\n\n\tEn este programa, igual que en el anterior, encontramos un error, esta vez en la línea 3. El problema que tenemos es que estamos asignándole a x una operacion de dos variables que no hemos inicializado por lo que no puede operar con ellas. \n\n12. ¿Qué hace el siguiente programa cuando el valor de la variable a es cero? Haga una propuesta para solucionar el error que se produce en tiempo de ejecución.\n\n\tLo que ocurre es que no podemos dividir un número por cero. Para solucionarlo podemos poner una sentencia para verificar que a sea diferente de 0.\n\n\tDe esta forma nos queda el programa de la forma:\n\n\ta = 0.0\n\twhile a == 0.0:\n\t\ta = float(raw_input('Valor de a: '))\n\tb = float(raw_input('Valor de b: '))\n\n\t#a * x + b = 0\n\tx = -b/a\n\n\tprint 'Solucion: ', x\n\n\tLa solución la he añadido al propio fichero ecuacion1ergrado1.py\n\n13. ¿Qué error se produce en tiempo de compilación?. ¿Cómo se soluciona?\n\n\tPor un lado tenemos un error que de tipo sintáctico, ya que en vez de hacer una comparación en la línea 8 estamos haciendo una asignación dentro de una sentencia if. Para solucionar esto simplemente añadimos un == al = de la sentencia.\n\n\tPor otro lado tenemos algunas tildes en la línea 12 que dan error, ya que no pertenecen a la codificación ASCII que es la que tiene por defecto python. Para arreglar esto le ponemos de codificación UTF-8 añadiendo dos líneas al principio de nuestro programa, de tal forma, que después de estos arreglos nos queda lo siguiente: \n\n\t#!/usr/bin/env python\n\t# -*- coding: utf-8 -*-\n\n\t#a * x + b = 0\n\ta = float(raw_input('Valor de a: '))\n\tb = float(raw_input('Valor de b: '))\n\n\tif a != 0:\n\t  x = -b/a\n\t  print 'Solucion: ', x\n\tif a == 0:\n  \tprint 'La ecuación no tiene solución.'\n\n  \tLa solución la he añadido al propio fichero ecuacion1ergrado2.py\n\n  \t14. Modifique el programa que calcula la solución de una ecuación de primer grado para que contemple que cuando tanto el valor de a como el de b son cero, la ecuación tiene infinitas soluciones. \n\n  \tLa solución la he añadido al propio fichero ecuacion1ergrado2_mod.py\n\n15. ¿Qué hace el siguiente programa?\n\t\n\tPrimero nos pide tres valores por pantalla, los cuales los guarda como floats en las variables 'a', 'b' y 'c'.\n\n\tSi el valor de 'a' es distinto de cero calculamos los valores de la ecuación de segundo grado o lo que es lo mismo x1 y x2, de tal forma:\n\t\tx1 = (-b + Raíz(b^(2) - (4 x a x c)) / (2 x a)\n\t\tx2 = (-b - Raíz(b^(2) - (4 x a x c)) / (2 x a)\n\n\t\ty mostramos el valor calculado de x1 y x2 en float.\n\n\tSi por el contrario el valor de 'a' es distinto de cero pasamos a evaluar el de 'b'. Si es distinto de cero calculamos 'x' de la forma:\t'x = -c/b' y lo mostramos por la pantalla. \n\n\tPor otro lado si 'b' es cero pasamos a revisar el valor de 'c' y simplemente si es igual o no a cero nos muestra un aviso por pantalla u otro. \n\n\n16. ¿Existe alguna diferencia entre el programa de la pregunta 15 y este cuando se ejecutan?\n\n\tAunque los bucles actúan de la misma forma que en el programa de la pregunta anterior a la hora de evaluar 'c' si este es igual a cero nos informa 'La ecuación no tiene solucion' y si no es cero nos muestra 'La ecuación tiene infinitas soluciones'. En el caso del ejercicio 15 nos muestra justo lo contrario si 'c' es cero nos dice que la ecuación tiene infinitas soluciones y si no, nos dice que no tiene solución.\n\n\n17. ¿Existe alguna diferencia entre el programa de la pregunta 15 y este cuando se ejecutan?\n\n\tAunque se comparen de forma diferente y la estructura de los bucles no sea la misma en este caso si que vamos a obtener los mismos resultados. \n\n\n18. Modifique el programa de la pregunta 17 para utilizar la sentencia elif.\n\n  \tLa solución la he añadido al fichero ecuacion2dogrado3_mod.py\n\n19. ¿Qué ocurre cuando ejecuta el programa de la pregunta 17 con los siguientes valores a = 1, b = 1 y c = 1? Proponga una solución.\n\nLo que ocurre es que no podemos hacer el cuadrado de un número negativo, para solucionarlo añado algunas comprobaciones. La solución se encuentra en el fichero ecuacion2dogrado3_mod2.py\n\n20. ¿Qué hace el siguiente programa?\n\nLo que hace este programa es ejecutar un bucle while 10 veces en el que va acumulando el valor del índice i a una variable que se llama sumatorio. Todo esto es lo mismo que decir que al final tendremos:\n\nsumatorio = 0 + 2 = 2 \nsumatorio = 2 + 3 = 5\nsumatorio = 5 + 4 = 9\nsumatorio = 9 + 5 = 14\n... hasta obtener \nsumatorio = 54 + 11 = 65 \n\n21. ¿Cuál es la diferencia entre este programa y el de la pregunta 20? ¿Producen ambos el mismo resultado? ¿Por qué?\n\n\tLa difenrencia está en que en este segundo programa dentro del bucle primero hacemos la suma del acumulador 'sumatorio' y luego incrementamos el índice, por lo que el resultado final es diferente. \n\n\tEn este caso el comportamiento de 'sumatorio' es de la forma:\n\n\nsumatorio = 0 + 1 = 1 \nsumatorio = 1 + 2 = 3\nsumatorio = 3 + 3 = 6\nsumatorio = 6 + 4 = 10\n... hasta obtener \nsumatorio = 45 + 10 = 55 \n\n22. ¿Qué hace el siguiente programa?\n\n\tDespués de añadirle ':' al finalizar el bucle podemos ver lo que hace el programa, que no es nada más y nada menos que calcular el valor del número que le pasemos elevado a 2, 3, 4 y 5. \n\n23. ¿Qué muestran las siguientes sentencias? ¿Cuál es el tipo de datos de la variable a?\n\n>>> a = ['pan', 'huevos', 100, 1234]\n>>> a\n['pan', 'huevos', 100, 1234]\n>>> a[0]\n'pan'\n>>> a[3]\n1234\n>>> a[-2]\n100\n>>> a[1:-1]\n['huevos', 100]\n>>> a[:2] + ['carne', 2*2]\n['pan', 'huevos', 'carne', 4]\n>>> 3*a[:3] + ['Boo!']\n['pan', 'huevos', 100, 'pan', 'huevos', 100, 'pan', 'huevos', 100, 'Boo!']\n>>> a\n['pan', 'huevos', 100, 1234]\n>>> a[2] = a[2] + 23\n>>> a\n['pan', 'huevos', 123, 1234]\n>>> a[0:2] = [1, 12]\n>>> a\n[1, 12, 123, 1234]\n>>> len(a)\n4\n>>> q = [2, 3]\n>>> p = [1, q, 4]\n>>> len(p)\n3\n>>> p\n[1, [2, 3], 4]\n>>> p[1]\n[2, 3]\n>>> p[1][0]\n2\n>>> p[1].append('extra')\n>>> p\n[1, [2, 3, 'extra'], 4]\n>>> q\n[2, 3, 'extra']\n\n24. ¿Qué hacen las siguientes sentencias?\n\n>>> a = ['gato', 'ventana', 'defenestrado']\n>>> for x in a:\n...     print x, len(x)\n... \ngato 4\nventana 7\ndefenestrado 12\n>>> for x in a[:]:\n...     if len(x) > 6: a.insert(0,x)\n...     print a\n... \n['gato', 'ventana', 'defenestrado']\n['ventana', 'gato', 'ventana', 'defenestrado']\n['defenestrado', 'ventana', 'gato', 'ventana', 'defenestrado']\n\n\n25. ¿Qué hacen las siguientes sentencias?\n>>> r = range(5,10)\n>>> print r\n[5, 6, 7, 8, 9]\n>>> s = range(0, 10, 3)\n>>> print s\n[0, 3, 6, 9]\n>>> a = ['gato', 'ventana', 'defenestado']\n>>> for i in range(len(a)):\n...     print i, a[i]\n... \n0 gato\n1 ventana\n2 defenestado\n\n26. ¿Qué hace el siguiente programa?\n\tfor i in range(0,5):\n\t\tfor j in range(0,3):\n\t\t\tprint i, j\n\n\tSimplemente anida dos bucles en donde la 'i' pertenece al rango [0,4] y 'j' al rango [0,2].\n\n27. ¿Qué hace el siguiente programa?\n\tfor i in range(0,5):\n\t\tfor j in range(i,5):\n\t\t\tprint i, j\n\n\tDe la misma forma que en el caso anterior tenemos dos bucles anidados, pero en este caso si 'i' va a pertenecer al rango [0,4]; la variable 'j' va a tener un comportamiento distinto, ya que su rango va a depender de la iteración de 'i', de la forma que su rango va a ir decreciendo a medida que lo haga 'i', y va a ser de la forma [i,4]\n\n28. ¿Qué hace el siguiente programa?\n\tfor i in range(0,5):\n\t\tfor j in range(0,i):\n\t\t\tprint i, j\n\n\tDe la misma forma que en el caso anterior tenemos dos bucles anidados, igual que antes 'i' va a pertenecer al rango [0,4]mientras que la variable 'j' va a tener un comportamiento distinto, ya que su rango va a depender de la iteración de 'i', de tal forma que su rango va a ir incrementando (al contrario que antes) a medida que lo haga 'i', y va a ser de la forma [0,4]\n\n29. ¿Qué hace el siguiente programa?\n\t\n\tfor i in range(0,4):\n\t\tfor j in range(0,4):\n\t\t\tfor k in range(0,2):\n\t\t\t\tprint i, j, k\n\n\tEn este caso tenemos tres bucles for anidados y los rangos a los que va a pertenecer cada variable son:\n\t\t'i' pertenece a [0,3]\n\t\t'j' pertenece a [0,3]\n\t\t'k' pertenece a [0,1]\n\n\n30. ¿Qué hace el siguiente programa?\n\t\n\tfor i in range(0,4):\n\t\tfor j in range(0,4):\n\t\t\tfor k in range(i,j):\n\t\t\t\tprint i, j, k\n\n\tEste programa va a tener tres bucles for anidados en el que el rango de 'i' y de 'j' van a ser iguales, es decir [0, 3]. Y finalmente el rango de k va a depender de los valores de 'i' y 'j' en cada momento y siempre va a pertenecer al rango [0, 2] \n\n\n\n31. ¿Qué hace el siguiente programa?\n\t\n\tfor i in range(1,5):\n\t\tfor j in range(0,10,i):\n\t\t\tprint i, j\n\n\tEl primer bucle simplemente va a mover a la variable 'i' dentro de los valores [1,4], mientras que el segundo va a variar el valor de j de tal forma que va a coger los números del rango [0,9] pero los va a coger de 'i' en 'i' valores.\n\n\n32. ¿Qué hay mal en la siguiente función?\n\n\tdef es_perfecto(n):\n\t\tfor i in range(1,n):\n\t\t\tsumatorio = 0\n\t\t\tif n % i == 0:\n\t\t\t\tsumatorio += i\n\t\t\treturn sumatorio == n\n\n\tLo que ocurre es que estamos inicializando en cada momento el valor de sumatorio dentro del bucle for, lo que debemos hacer es inicializar esta variable fuera del mismo. De esta forma obtenemos:\n\n\n\tdef es_perfecto(n):\n\t\tsumatorio = 0\n\t\tfor i in range(1,n):\n\t\t\tif n % i == 0:\n\t\t\t\tsumatorio += i\n\t\t\treturn sumatorio == n\n\n33. ¿Qué hace el siguiente programa?\n\n\tdef tabla_perfectos(m):\n\t\tfor i in range(1, m+1):\n\t\t\tif es_perfecto(i):\n\t\t\t\tprint i, ’es perfecto’\n\n\tx = int( raw_input(’Introduzca un numero ’) )\n\ttabla_perfectos(x)\n\n\tDado un número 'm' que le pasemos, si considera que es perfecto alguno de los valores que van del rango [0, m] nos lo va a mostrar en pantalla junto con un aviso diciéndonoslo, por el contrario, si el número no es perfecto simplemente no mostrará nada. "]],"start1":0,"start2":0,"length1":0,"length2":10204}]],"length":10204}
{"contributors":[],"silentsave":false,"ts":1382030755640,"patch":[[{"diffs":[[1,"P"],[0,"rogramación "]],"start1":0,"start2":0,"length1":12,"length2":13}]],"length":10205,"saved":false}
